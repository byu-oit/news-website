<?php
/**
 * @file
 * Make base fields such as 'title' available in "Manage Display".
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_entity_type_build().
 */
function manage_display_entity_type_build(array &$entity_types) {
  $entity_types['node']->set('node_basefield_skip_preprocess', TRUE);

  // Set user name as a label else it gets printed twice on the user page.
  $keys = $entity_types['user']->get('entity_keys');
  $keys['label'] = 'name';
  $keys = $entity_types['user']->set('entity_keys', $keys);
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function manage_display_entity_base_field_info_alter(&$base_field_definitions, EntityTypeInterface $entity_type) {
  $info = manage_display_base_field_info($entity_type->id());
  foreach ($info as $field => $options) {
    $base_field_definitions[$field]
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayOptions('view', $options);
  }
}

// EntityViewController::buildTitle creates problems, see https://www.drupal.org/node/2941208.
// It runs as a pre_render hook, can't see any way to alter it.
//
// Sequence of events.
// 1) Building
// - EntityViewController::view
// - EntityViewBuilder::view
// - hook_entity_build_defaults_alter: can add OWN_entity_pre_render but Core
//   pre_render not available to alter
// 2) Rendering
// - pre_render
//   - OWN_entity_pre_render: too later to alter Core pre_render; no built fields to hook
//   - EntityViewBuilder::build
//     - hook_entity_view_display_alter
//     - hook_entity_view, hook_entity_view_alter
//   - EntityViewController::buildTitle
//     - title field: pre_process, template_preprocess_field, hook_preprocess_field
// - preprocess
//   - node: pre_process, template_preprocess_node, hook_preprocess_node
//   - field: pre_process, template_preprocess_field, hook_preprocess_field

// Implements hook_entity_build_defaults_alter().
// function manage_display_entity_build_defaults_alter(array &$build, EntityInterface $entity, $view_mode) {
//   $build['#pre_render'][] = 'manage_display_entity_pre_render';
// }

// function manage_display_entity_pre_render(array $page) {
//   return $page;
// }

/**
 * Implements hook_entity_view().
 */
// function manage_display_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
//   if ($entity instanceof FieldableEntityInterface) {
//     $label_field = $entity->getEntityType()->getKey('label');
//     if (isset($build[$label_field])) {
//       $build[$label_field]['#pre_render'][] = 'manage_display_title_pre_render';
//       @todo If want to keep the field in the entity.
//       Requires a change to EntityViewController::buildTitle
//       $build['#built_page_title'] = TRUE;
//       @todo If also want to hide title block.
//       But loses metadata - better to prevent only title block.
//       $build['#title'] = '';
//       ??$build['#title'] = new HtmlEscapedText($entity->label());
//     }
//   }
// }

/**
 * Implements pre_render callback for entity.
 */
// function manage_display_title_pre_render(array $build) {
//   if (isset($build['#is_page_title'])) {
//     // @todo Ensure markup is inline: swap formatter etc. Workaround for https://www.drupal.org/node/2941208.
//     // Is this too late, as it has already been built?  Instead hook_entity_view_display_alter?
//   }
//   return $build;
// }

/**
 * Return information about the base fields that can be managed.
 *
 * @param string $entity_type_id
 *   Entity type ID to return fields for.
 *
 * @return array
 *   Array keyed by field name with value equal to the default display options.
 */
function manage_display_base_field_info($entity_type_id) {
  $info['node']['title'] = [
    'label' => 'hidden',
    'type' => 'title',
    'weight' => -50,
  ];

  // Default uid/created to hidden as that's most often the correct default,
  // especially on teaser.
  $info['node']['uid'] = ['region' => 'hidden'];
  $info['node']['created'] = ['region' => 'hidden'];

  // Default user name to hidden to match Drupal default.
  $info['user']['name'] = ['region' => 'hidden'];

  // @todo Skip other entities for now as the core patch has stalled.
  //$info['taxonomy_term']['name'] = $info['node']['title'];
  //$info['aggregator_feed']['title'] = $info['node']['title'];

  return isset($info[$entity_type_id]) ? $info[$entity_type_id] : [];
}

/**
 * Implements hook_theme().
 */
function manage_display_theme() {
  return [
    'submitted' => [
      'base hook' => 'username',
      'variables' => [
        'date' => [],
        'metadata' => [],
        'account' => NULL,
        'attributes' => [],
        'link_options' => [],
      ],
    ],
  ];
}

/**
 * Prepares variables for 'submitted' field formatter template.
 */
function template_preprocess_submitted(&$variables) {
  $account = $variables['account'];

  // @todo Don't use the theme setting, instead put a setting in the formatter
  // to choose a display mode (don't hard-code to 'compact).
  // Hence hide the GUI for features.node_user_picture.
  if (theme_get_setting('features.node_user_picture')) {
    // To change user picture settings (e.g. image style), edit the 'compact'
    // view mode on the User entity. Note that the 'compact' view mode might
    // not be configured, so remember to always check the theme setting first.
    $variables['author_picture'] = user_view($account, 'compact');
  }

  if (is_array($variables['date'])) {
    $variables['date']['#inline_field'] = TRUE;
    $variables['date'] = \Drupal::service('renderer')->render($variables['date']);
    // @todo This doesn't fully work with quickedit - when the field gets re-rendered after edit, the date is missing.
    // Detect this case with a field preprocess hook and make a call to render the date.
    // Drupal core doesn't fully work either: the user picture doesn't get re-rendered.
  }
}

/**
 * Implements hook_preprocess_node().
 */
function manage_display_preprocess_node(&$variables) {
  // @todo generalise this to any entity type.  Read entity_keys to find the field names.
  // Move date into the created element.
  if (isset($variables['content']['uid']['#formatter']) && ($variables['content']['uid']['#formatter'] == 'submitted')) {
    if (isset($variables['content']['created'])) {
      $variables['content']['uid'][0]['#date'] = $variables['content']['created'];
      unset($variables['content']['created']);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function manage_display_form_node_type_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Hide display_submitted in GUI.
  $form['display']['#access'] = FALSE;
}
