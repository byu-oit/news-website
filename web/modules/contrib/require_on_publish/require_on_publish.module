<?php

/**
 * @file
 * Module file for the Require on Publish module.
 */

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;
use Drupal\field\FieldConfigInterface;

/**
 * Implements hook_help().
 */
function require_on_publish_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.require_on_publish':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The Require on Publish module provides a mechanism for requiring a field to be filled out <em>only when publishing an entity</em>.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('Tick off the "Require on Publish" checkbox when managing a field. That\'s it!') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function require_on_publish_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\field\FieldConfigInterface $field_config */
  $field_config = $form_state->getFormObject()->getEntity();

  /** @var \Drupal\Core\Entity\ContentEntityType $entity_type */
  $entity_type = \Drupal::entityTypeManager()->getDefinition($field_config->getTargetEntityTypeId());
  if (!require_on_publish_entity_is_publishable($entity_type->getClass())) {
    return;
  }

  $form['#attached']['library'][] = 'require_on_publish/config-form';
  $form['require_on_publish'] = [
    '#type' => 'checkbox',
    '#title' => t('Required on Publish'),
    '#default_value' => $field_config->getThirdPartySetting('require_on_publish', 'require_on_publish', FALSE),
    '#weight' => -4,
  ];
  $form['actions']['submit']['#submit'][] = 'require_on_publish_field_config_submit';
}

/**
 * Submit handler for the form_field_config_edit form.
 */
function require_on_publish_field_config_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $entity = $form_state->getFormObject()->getEntity();

  /** @var int $value */
  $value = $form_state->getValue('require_on_publish');

  $entity->setThirdPartySetting('require_on_publish', 'require_on_publish', $value)->save();
}

/**
 * Implements hook_entity_type_alter().
 */
function require_on_publish_entity_type_alter(array &$entity_types) {
  foreach ($entity_types as $type => $entity_type) {
    /** @var \Drupal\Core\Entity\EntityTypeInterface $class */
    if (require_on_publish_entity_is_publishable($entity_type->getClass())) {
      $entity_types[$type]->addConstraint('require_on_publish');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function require_on_publish_preprocess_datetime_wrapper(&$variables) {
  $element = $variables['element'];
  if (isset($element['#required_on_publish']) && $element['#required_on_publish']) {
    $variables['title_attributes']['class'][] = 'form-required-on-publish';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function require_on_publish_preprocess_field_multiple_value_form(&$variables) {
  $element = $variables['element'];
  $variables['multiple'] = $element['#cardinality_multiple'];
  if ($variables['multiple']) {
    $header_attributes = new Attribute(['class' => ['label']]);
    if (!empty($element['#required'])) {
      $header_attributes['class'][] = 'js-form-required';
      $header_attributes['class'][] = 'form-required';
    }

    if (isset($element['#required_on_publish']) && $element['#required_on_publish']) {
      $header_attributes['class'][] = 'form-required-on-publish';
    }

    $header = [
      [
        'data' => [
          '#prefix' => '<h4' . $header_attributes . '>',
          '#markup' => $element['#title'],
          '#suffix' => '</h4>',
        ],
        'colspan' => 2,
        'class' => ['field-label'],
      ],
      t('Order', [], ['context' => 'Sort order']),
    ];
    $variables['table']['#header'] = $header;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function require_on_publish_preprocess_fieldset(&$variables) {
  $element = $variables['element'];
  if (isset($element['#required_on_publish']) && $element['#required_on_publish']) {
    $variables['legend_span']['attributes'] = new Attribute(['class' => ['form-required-on-publish']]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function require_on_publish_preprocess_form_element(&$variables) {
  $element = $variables['element'];
  if (isset($element['#required_on_publish']) && $element['#required_on_publish']) {
    $variables['label']['#attributes']['class'][] = 'form-required-on-publish';
  }
}

/**
 * Implements hook_field_widget_entity_reference_paragraphs_form_alter().
 */
function require_on_publish_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {
  $paragraph_type = $element['#paragraph_type'];
  $fields = \Drupal::service('entity_field.manager')->getFieldDefinitions('paragraph', $paragraph_type);
  foreach ($fields as $field_config) {
    if (!($field_config instanceof FieldConfigInterface)) {
      continue;
    }
    if ($field_config->getThirdPartySetting('require_on_publish', 'require_on_publish', FALSE)) {
      $field_name = $field_config->getName();
      $form['#attached']['library'][] = 'require_on_publish/require_on_publish';
      require_on_publish_add_indicator($element['subform'][$field_name]['widget']);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function require_on_publish_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\Core\Entity\EntityFormInterface $form_object */
  $form_object = $form_state->getFormObject();
  if (!$form_object instanceof EntityFormInterface) {
    return;
  }
  $entity = $form_object->getEntity();
  if (!require_on_publish_entity_is_publishable(get_class($entity))) {
    return;
  }
  foreach ($entity->getFields() as $field) {
    $field_config = $field->getFieldDefinition();
    if (!($field_config instanceof FieldConfigInterface)) {
      continue;
    }
    if ($field_config->getThirdPartySetting('require_on_publish', 'require_on_publish', FALSE)) {
      $field_name = $field_config->getName();
      if (!isset($form[$field_name])) {
        continue;
      }
      $form['#attached']['library'][] = 'require_on_publish/require_on_publish';
      require_on_publish_add_indicator($form[$field_name]['widget']);
    }
  }
}

/**
 * Adds an indicator to fields that are required on publish.
 *
 * @param array $widget
 *   The widget array.
 */
function require_on_publish_add_indicator(array &$widget) {
  $widget['#required_on_publish'] = TRUE;

  if (array_key_exists('target_id', $widget)) {
    $widget['target_id']['#required_on_publish'] = TRUE;
  }
  elseif (array_key_exists('value', $widget)) {
    $widget['value']['#required_on_publish'] = TRUE;

    if (is_array($widget['value']['title'])) {
      $widget['value']['title']['#required_on_publish'] = TRUE;
    }
  }
  elseif (array_key_exists(0, $widget)) {
    $widget[0]['#required_on_publish'] = TRUE;

    if (array_key_exists('value', $widget[0])) {
      $widget[0]['value']['#required_on_publish'] = TRUE;
    }
  }
}

/**
 * Checks whether an entity type is publishable or not.
 *
 * @param string $entity_class
 *   The class name.
 *
 * @return bool
 *   Whether the entity can be published or not.
 */
function require_on_publish_entity_is_publishable($entity_class) {
  $traits = require_on_publish_class_uses_deep($entity_class);
  if (!in_array('Drupal\Core\Entity\EntityPublishedTrait', $traits)) {
    return FALSE;
  }
  return TRUE;
}

/**
 * Returns an array with the names of the traits that the given class uses.
 *
 * @param mixed $class
 *   An object (class instance) or a string (class name).
 * @param bool $autoload
 *   Whether to allow this function to load the class automatically through the
 *   __autoload() magic method.
 *
 * @see http://php.net/manual/en/function.class-uses.php#112671
 *
 * @return array
 *   An array on success, or FALSE on error.
 */
function require_on_publish_class_uses_deep($class, $autoload = TRUE) {
  $traits = [];

  // Get traits of all parent classes.
  do {
    $traits = array_merge(class_uses($class, $autoload), $traits);
  } while ($class = get_parent_class($class));

  // Get traits of all parent traits.
  $traitsToSearch = $traits;
  while (!empty($traitsToSearch)) {
    $newTraits = class_uses(array_pop($traitsToSearch), $autoload);
    $traits = array_merge($newTraits, $traits);
    $traitsToSearch = array_merge($newTraits, $traitsToSearch);
  };

  foreach ($traits as $trait => $same) {
    $traits = array_merge(class_uses($trait, $autoload), $traits);
  }

  return array_unique($traits);
}
